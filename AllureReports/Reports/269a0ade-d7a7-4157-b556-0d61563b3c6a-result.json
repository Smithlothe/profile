{"name": "test_addEmp_ddt_007", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button data-v-10d463b7=\"\" data-v-304890b0=\"\" type=\"submit\" class=\"oxd-button oxd-button--medium oxd-button--secondary orangehrm-left-space\">...</button> is not clickable at point (1953, 491). Other element would receive the click: <div data-v-d5bfe35b=\"\" class=\"oxd-form-loader\">...</div>\n  (Session info: chrome=131.0.6778.205)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6237B6CC5+28821]\n\t(No symbol) [0x00007FF623723850]\n\t(No symbol) [0x00007FF6235C578A]\n\t(No symbol) [0x00007FF623620E8E]\n\t(No symbol) [0x00007FF62361E92C]\n\t(No symbol) [0x00007FF62361BAF6]\n\t(No symbol) [0x00007FF62361AA51]\n\t(No symbol) [0x00007FF62360CBA0]\n\t(No symbol) [0x00007FF62363F2FA]\n\t(No symbol) [0x00007FF62360C3F6]\n\t(No symbol) [0x00007FF62363F510]\n\t(No symbol) [0x00007FF62365F412]\n\t(No symbol) [0x00007FF62363F0A3]\n\t(No symbol) [0x00007FF62360A778]\n\t(No symbol) [0x00007FF62360B8E1]\n\tGetHandleVerifier [0x00007FF623AEFCCD+3408029]\n\tGetHandleVerifier [0x00007FF623B0743F+3504143]\n\tGetHandleVerifier [0x00007FF623AFB61D+3455469]\n\tGetHandleVerifier [0x00007FF62387BDCB+835995]\n\t(No symbol) [0x00007FF62372EB6F]\n\t(No symbol) [0x00007FF62372A824]\n\t(No symbol) [0x00007FF62372A9BD]\n\t(No symbol) [0x00007FF62371A1A9]\n\tBaseThreadInitThunk [0x00007FF9CC4DE8D7+23]\n\tRtlUserThreadStart [0x00007FF9CDABFBCC+44]", "trace": "self = <testCases.test_addemp_ddt.Test_addEmp_DDT object at 0x000001A24BD3C290>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f1cb7ad24fca96023b5fe54ff1d84f8a\")>\n\n    @pytest.mark.addempddt\n    def test_addEmp_ddt_007(self,setup):\n        self.driver = setup\n        self.log.info(\"test_addEmp_ddt_007 is Started\")\n        self.log.info(\"Browser is openning\")\n        self.driver.get(self.Url)\n        self.log.info(\"Go to Url--> \"+self.Url)\n        self.lp = loginpage(self.driver)\n        self.lp.Enter_UserName(self.username)\n        self.log.info(\"Entering Username \"+ self.username)\n        self.lp.Enter_Password(self.password)\n        self.log.info(\"Entering Password \" +self.password)\n        self.lp.Click_Login()\n        self.log.info(\"Click on Login Button\")\n        self.ae = AddEmployee(self.driver)\n        self.ae.Click_PIM()\n        self.log.info(\"CLick on PIM\")\n        self.rows = XLutils.getrowCount(self.path,\"Sheet1\")\n        self.ae.Click_AddEmployee()\n        self.log.info(\"Click on Add Employee Button\")\n        status_list = []\n        for r in range(2,self.rows+1):\n            self.firstname = XLutils.readData(self.path,\"Sheet1\",r,2)\n            self.middlename = XLutils.readData(self.path,\"Sheet1\",r,3)\n            self.lastname = XLutils.readData(self.path,\"Sheet1\",r,4)\n            self.ae.Enter_FirstName(self.firstname)\n            self.log.info(\"Entering FirstName -->\"+self.firstname)\n            self.ae.Enter_MiddleName(self.middlename)\n            self.log.info(\"Entering middlename -->\"+self.middlename)\n            self.ae.Enter_LastName(self.lastname)\n            self.log.info(\"Entering Lastname -->\"+self.lastname)\n>           self.ae.Click_Save()\n\ntestCases\\test_addemp_ddt.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npageObject\\AddEmp_Page.py:32: in Click_Save\n    self.driver.find_element(*AddEmployee.Click_Save_XPATH).click()\nC:\\Users\\hp\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\hp\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:403: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\hp\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001A24BD63F10>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF62371A1A9]\\\\n\\\\tBaseThreadInitThunk [0x00007FF9CC4DE8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FF9CDABFBCC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button data-v-10d463b7=\"\" data-v-304890b0=\"\" type=\"submit\" class=\"oxd-button oxd-button--medium oxd-button--secondary orangehrm-left-space\">...</button> is not clickable at point (1953, 491). Other element would receive the click: <div data-v-d5bfe35b=\"\" class=\"oxd-form-loader\">...</div>\nE         (Session info: chrome=131.0.6778.205)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6237B6CC5+28821]\nE       \t(No symbol) [0x00007FF623723850]\nE       \t(No symbol) [0x00007FF6235C578A]\nE       \t(No symbol) [0x00007FF623620E8E]\nE       \t(No symbol) [0x00007FF62361E92C]\nE       \t(No symbol) [0x00007FF62361BAF6]\nE       \t(No symbol) [0x00007FF62361AA51]\nE       \t(No symbol) [0x00007FF62360CBA0]\nE       \t(No symbol) [0x00007FF62363F2FA]\nE       \t(No symbol) [0x00007FF62360C3F6]\nE       \t(No symbol) [0x00007FF62363F510]\nE       \t(No symbol) [0x00007FF62365F412]\nE       \t(No symbol) [0x00007FF62363F0A3]\nE       \t(No symbol) [0x00007FF62360A778]\nE       \t(No symbol) [0x00007FF62360B8E1]\nE       \tGetHandleVerifier [0x00007FF623AEFCCD+3408029]\nE       \tGetHandleVerifier [0x00007FF623B0743F+3504143]\nE       \tGetHandleVerifier [0x00007FF623AFB61D+3455469]\nE       \tGetHandleVerifier [0x00007FF62387BDCB+835995]\nE       \t(No symbol) [0x00007FF62372EB6F]\nE       \t(No symbol) [0x00007FF62372A824]\nE       \t(No symbol) [0x00007FF62372A9BD]\nE       \t(No symbol) [0x00007FF62371A1A9]\nE       \tBaseThreadInitThunk [0x00007FF9CC4DE8D7+23]\nE       \tRtlUserThreadStart [0x00007FF9CDABFBCC+44]\n\nC:\\Users\\hp\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: ElementClickInterceptedException"}, "attachments": [{"name": "log", "source": "409b80df-05cb-43a9-9d19-e1145c83095b-attachment.txt", "type": "text/plain"}], "start": 1735549201972, "stop": 1735549233636, "uuid": "2896295e-cea9-447d-ae9a-1602d50490c3", "historyId": "c4de3d50e71b62cc6664f1aa7d9c313b", "testCaseId": "c4de3d50e71b62cc6664f1aa7d9c313b", "fullName": "testCases.test_addemp_ddt.Test_addEmp_DDT#test_addEmp_ddt_007", "labels": [{"name": "tag", "value": "addempddt"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_addemp_ddt"}, {"name": "subSuite", "value": "Test_addEmp_DDT"}, {"name": "host", "value": "SMITH"}, {"name": "thread", "value": "6336-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_addemp_ddt"}]}